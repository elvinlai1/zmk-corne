/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define raise 1
#define lower 2
#define FUNCS 3
#define NUMPAD 5


&mt {
    tapping-term-ms = <300>;
};


/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <5>;
                };
        };

        keymap {
                compatible = "zmk,keymap";


                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | SHIFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | DEL |
//                    |  FUNC | RSE | SPC |   | ENT |  LWR | FUNCS |
// -----------------------------------------------------------------------------------------

                        bindings = <
   &kp TAB      &kp Q &kp W &kp E &kp R &kp T      &kp Y &kp U  &kp I     &kp O   &kp P     &kp BSPC
   &kp LSHIFT   &kp A &kp S &kp D &kp F &kp G      &kp H &kp J  &kp K     &kp L   &kp SEMI  &kp SQT
   &kp LCTRL    &kp Z &kp X &kp C &kp V &kp B      &kp N &kp M  &kp COMMA &kp DOT &kp FSLH  &kp DEL
                  &kp LALT  &mo 1   &kp SPACE      &kp RET  &mo 2  &mo FUNCS
                        >;
                };

                raise_layer {
                        bindings = <
   &kp GRAVE  &kp N1    &kp N2    &kp N3   &kp N4     &kp N5           &kp N6      &kp N7      &kp N8      &kp N9      &kp N0     &trans
   &trans     &trans    &trans    &trans   &kp LPAR   &kp LBKT         &kp RBKT    &kp RPAR    &kp MINUS   &kp EQUAL   &trans     &trans 
   &trans     &trans    &trans    &trans   &trans     &trans           &trans      &trans      &trans      &trans      &trans     &kp ESC 
                                  &trans   &trans     &trans           &trans      &trans      &none 
                        >;
                };

                lower_layer {
                        bindings = <
   &trans     &trans   &trans   &trans   &trans   &trans          &trans     &trans     &trans   &trans     &trans   &trans 
   &trans     &trans   &trans   &trans   &trans   &trans          &kp LEFT   &kp DOWN   &kp UP   &kp RIGHT  &trans   &trans
   &trans     &trans   &trans   &trans   &trans   &trans          &trans     &trans     &trans   &trans     &trans   &kp ESC
                             &trans   &kp LGUI    &trans          &trans     &trans     &trans
                        >;
                };

                funcs_layer {
                        bindings = <
   &trans   &kp F1   &kp F2   &kp F3   &kp F4   &kp F5               &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &kp BT_CLR
   &trans   &trans   &trans   &trans   &trans   &trans               &trans         &kp C_PREV     &kp C_VOL_DN   &kp C_VOL_UP   &kp C_NEXT     &trans 
   &trans   &trans   &trans   &trans   &trans   &trans               &trans         &trans         &trans         &trans         &kp LCTRL      &kp ESC
                              &trans   &trans   &kp C_PLAY_PAUSE     &trans         &trans         &none
                        >;
                };

                    numpad_layer {
                        bindings = <
    &none     &none    &none   &none    &none    &none             &kp KP_DIVIDE    &kp N7     &kp N8   &kp N9   &kp EQUAL   &trans
    &none     &none    &none   &none    &none    &none             &kp KP_MULTIPLY  &kp N4     &kp N5   &kp N6   &kp PLUS    &kp MINUS
    &trans    &none    &none   &none    &none    &none             &kp N0           &kp N1     &kp N2   &kp N3   &none       &kp KP_CLEAR
                               &none    &none    &trans            &trans           &none      &trans
                        >;
                };
        };
};

